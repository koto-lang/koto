make_enum = |entries...|
  entries
    .enumerate()
    .each |(index, id)| (id, index)
    .to_map()

make_bidirectional_enum = |entries...|
  entries
    .enumerate()
    .fold {}, |result, (index, id)|
      result.insert id, index
      result.insert index, id
      result

export
  @test make_enum: ||
    enum = make_enum "foo", "bar", "baz"
    assert_eq enum.foo, 0
    assert_eq enum.bar, 1
    assert_eq enum.baz, 2
    assert_eq enum[0][0], "foo"
    assert_eq enum[1][0], "bar"
    assert_eq enum[2][0], "baz"

  @test make_bidirectional_enum: ||
    enum = make_bidirectional_enum "foo", "bar", "baz"
    assert_eq enum.foo, 0
    assert_eq enum.bar, 1
    assert_eq enum.baz, 2
    assert_eq enum.get(0), "foo"
    assert_eq enum.get(1), "bar"
    assert_eq enum.get(2), "baz"

  @test match_against_enum_values: ||
    enum = make_enum "a", "b", "c"
    x = enum.b
    y = match x
      enum.a then 1
      enum.b then 2
      enum.c then 3
    assert_eq y, 2
