@tests =
  @test inline_if: ||
    x = if true then 10 else 20
    assert_eq x, 10

  @test inline_if_function_call: ||
    is_zero = |x| x == 0
    x = 0
    x = if is_zero 0 then 42
    assert_eq x, 42
    assert if is_zero 0 then true else false

  @test inline_if_multi_assignment: ||
    a, b = if true then 10, 20 else 30, 40
    assert_eq b, 20

  @test if_block: ||
    x = true
    a = 0
    if x
      a = 42
    assert_eq a, 42

  @test if_else_if: ||
    x = true
    if x == false
      # This comment shouldn't break parsing
      assert false
    else if false
      assert false
    else
           # ...and neither should this one
      if x == true
        assert true
          # or this one
        assert true

  @test switch_expression: ||
    fib = |n|
      switch
        n <= 0 then 0
        n == 1 then 1
        else (fib n - 1) + (fib n - 2)

    assert_eq 13, fib 7

  @test match_expression: ||
    inspect = |n|
      match n
        x if x < 0 then
          "negative"
        0 or 2 or 4 or 6 or 8 then
          "even"
        1 or 3 or 5 or 7 or 9 then
          "odd"
        else
          ">= 10"
    assert_eq (inspect 7), "odd"

  @test match_against_map_accesses: ||
    m = {foo: 42, bar: 99}
    z = match 99
      # Temporary values (map/list accesses, function calls) match if their results are equal
      m.foo then "foo"
      m.bar then "bar"
      other then "$other"
    assert_eq z, "bar"

  @test match_multiple_values: ||
    fizz_buzz = |n|
      match n % 3, n % 5
        0, 0 then "Fizz Buzz"
        0, _ then "Fizz"
        _, 0 then "Buzz"
        else n

    x = (10..=15)
      .each |n| fizz_buzz n
      .to_tuple()
    assert_eq x, ("Buzz", 11, "Fizz", 13, 14, "Fizz Buzz")

  @test match_lists_and_tuples: ||
    z = [1, 2, (3, 4), (5, [6, 7, 8])]

    a = match z
      # ... matches against any number of elements
      (3, 4, ...) then "starts with 3, 4"
      # A name can be given to capture the matched elements
      (start..., y, 10) then
        "starts with ${size start} elements and ends with [...$y, 10]"
      # Matched containers can be nested
      (a, b, (3, 4), (c, (6, rest...))) then
        a + b + c + size rest
    assert_eq a, 10
