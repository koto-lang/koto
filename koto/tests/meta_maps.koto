globals = {}

# foo acts as a constructor for the Foo type
foo = |x|
  # Make a map that contains x, and return its data with the meta map from foo_meta
  {x}.with_meta globals.foo_meta

# Declaring the overridden operators once and then cloning the meta map into the foo
# instance is more efficient than declaring them each time foo is called.
globals.foo_meta =
  # Arithmetic operators
  @+: |other| foo self.x + other.x
  @-: |other| foo self.x - other.x
  @*: |other| foo self.x * other.x
  @/: |other| foo self.x / other.x
  @%: |other| foo self.x % other.x

  # Compound assignment operators
  @+=: |other|
    self.x += other
    self
  @-=: |other|
    self.x -= other
    self
  @*=: |other|
    self.x *= other
    self
  @/=: |other|
    self.x /= other
    self
  @%=: |other|
    self.x %= other
    self

  # Comparison operators
  @<: |other| self.x < other.x
  @<=: |other| self.x <= other.x
  @>: |other| self.x > other.x
  @>=: |other| self.x >= other.x
  @==: |other| self.x == other.x
  @!=: |other| not self == other

  # Negation (e.g. -foo)
  @negate: || foo -self.x

  # Function call
  @||: || self.x

  # Indexing
  @[]: |index|
    if not (0..self.x).contains index
      throw 'invalid index'
    index
  @size: || self.x

  # Custom iteration
  # @iterator must be a function that returns an iterable value,
  # in this case a map with implementations of @next and @next_back
  @iterator: ||
    # Start iterating from 0
    start: 0
    # End at self.x
    end: self.x

    @next: ||
      result = self.start
      if result < self.end
        self.start += 1
        result
      else
        null

    @next_back: ||
      result = self.end
      if result > self.start
        self.end -= 1
        result
      else
        null

  # Formatting
  @display: || "Foo ({self.x})"

  # Type
  @type: "Foo"

  # Named meta entries are accessible on the value but don't appear as map entries
  @meta hello: "Hello"
  @meta say_hello: |name| "{self.hello}, {name}!"

@tests =
  @test add: ||
    assert_eq (foo(10) + foo(20)), foo 30

  @test subtract: ||
    assert_eq (foo(99) - foo(100)), foo -1

  @test multiply: ||
    assert_eq (foo(6) * foo(7)), foo 42

  @test divide: ||
    assert_eq (foo(42) / foo(2)), foo 21

  @test remainder: ||
    assert_eq (foo(42) % foo(10)), foo 2

  @test add_assign: ||
    assert_eq (foo(10) += 20), foo 30

  @test subtract_assign: ||
    assert_eq (foo(99) -= 100), foo -1

  @test multiply_assign: ||
    assert_eq (foo(6) *= 7), foo 42

  @test divide_assign: ||
    assert_eq (foo(42) /= 2), foo 21

  @test remainder_assign: ||
    assert_eq (foo(42) %= 10), foo 2

  @test less: ||
    assert foo(5) < foo(6)
    assert not (foo(5) < foo(5))

  @test less_or_equal: ||
    assert foo(5) <= foo(6)
    assert foo(5) <= foo(5)

  @test greater: ||
    assert foo(40) > foo(30)
    assert not (foo(40) > foo(40))

  @test greater_or_equal: ||
    assert foo(40) >= foo(30)
    assert foo(40) >= foo(40)

  @test equal: ||
    bar = |x, y|
      x: x
      y: y
      @==: |other|
        # Maps already have equality comparison that compare each member,
        # so to show the effect of overriding, ignore y
        self.x == other.x
    assert bar(21, -1) == bar(21, -2)
    assert not (bar(21, -1) == bar(22, -1))
    assert_eq bar(100, -1), bar(100, -2)

  @test not_equal: ||
    assert_ne foo(7), foo(8)
    assert not (foo(7) != foo(7))

  @test negate: ||
    assert_eq -foo(1), foo(-1)

  @test index: ||
    assert_eq foo(10)[5], 5
    assert_eq foo(100)[99], 99

  @test size: ||
    assert_eq (size foo(10)), 10
    assert_eq (size foo(99)), 99

  @test call: ||
    assert_eq foo(99)(), 99

  @test iterator: ||
    assert_eq foo(5).to_tuple(), (0, 1, 2, 3, 4)
    assert_eq foo(4).to_list(), [0, 1, 2, 3]

  @test display: ||
    assert_eq "{foo -1}", "Foo (-1)"

  @test type: ||
    assert_eq (koto.type (foo 0)), "Foo"

  @test named_meta_entries: ||
    f = foo 99

    # Map operations aren't inherited by the Foo meta map, so the map module has to be used directly
    assert_eq map.keys(f).to_list(), ["x"]

    assert_eq f.hello, "Hello"
    assert_eq f.say_hello("you"), "Hello, you!"

  @test get_meta: ||
    f = foo 42
    meta = map.get_meta f

    # get_meta returns a map with the argument's meta map, but no data
    assert_eq map.keys(meta).count(), 0
    assert_eq meta.hello, "Hello"

    # Add an "x" entry, allowing it to be treated as a Foo
    meta.x = -1
    assert_eq f + meta, foo 41
