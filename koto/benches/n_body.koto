#-
An implementation of the N-body benchmark from:
https://benchmarksgame-team.pages.debian.net/benchmarksgame/description/nbody.html#nbody

Adapted from the lua implementation:
https://benchmarksgame-team.pages.debian.net/benchmarksgame/program/nbody-lua-4.html
-#

from geometry import vec3
from number import pi

solar_mass = 4 * pi * pi
days_per_year = 365.24

sun, jupiter, saturn, uranus, neptune = {}, {}, {}, {}, {}


init_bodies = ||
  sun.pos = vec3 0
  sun.vel = vec3 0
  sun.mass = solar_mass

  jupiter.pos =
    vec3
      4.84143144246472090e+00,
      -1.16032004402742839e+00,
      -1.03622044471123109e-01
  jupiter.vel =
    vec3
      (1.66007664274403694e-03 * days_per_year),
      (7.69901118419740425e-03 * days_per_year),
      (-6.90460016972063023e-05 * days_per_year)
  jupiter.mass = 9.54791938424326609e-04 * solar_mass

  saturn.pos =
    vec3
      8.34336671824457987e+00,
      4.12479856412430479e+00,
      -4.03523417114321381e-01
  saturn.vel =
    vec3
      (-2.76742510726862411e-03 * days_per_year),
      (4.99852801234917238e-03 * days_per_year),
      (2.30417297573763929e-05 * days_per_year)
  saturn.mass = 2.85885980666130812e-04 * solar_mass

  uranus.pos =
    vec3
      1.28943695621391310e+01,
      -1.51111514016986312e+01,
      -2.23307578892655734e-01
  uranus.vel =
    vec3
      (2.96460137564761618e-03 * days_per_year),
      (2.37847173959480950e-03 * days_per_year),
      (-2.96589568540237556e-05 * days_per_year)
  uranus.mass = 4.36624404335156298e-05 * solar_mass

  neptune.pos =
    vec3
      1.53796971148509165e+01,
      -2.59193146099879641e+01,
      1.79258772950371181e-01
  neptune.vel =
    vec3
      (2.68067772490389322e-03 * days_per_year),
      (1.62824170038242295e-03 * days_per_year),
      (-9.51592254519715870e-05 * days_per_year)
  neptune.mass = 5.15138902046611451e-05 * solar_mass

bodies = [sun, jupiter, saturn, uranus, neptune]

advance = |bodies, dt|
  for i, bi in bodies.enumerate()
    bi_pos = bi.pos
    bi_vel = bi.vel
    for bj in bodies[(i + 1)..]
      dist = bi_pos - bj.pos
      dist2 = (dist * dist).sum()
      mag = dist2.sqrt()
      mag = dt / (mag * dist2)
      bm = bj.mass * mag
      bi_vel += dist * -bm
      bm = bi.mass * mag
      bj.vel += dist * bm
    bi.vel = bi_vel
    bi.pos += bi_vel * dt

get_energy = |bodies, nbody|
  energy = 0
  for i, bi in bodies.enumerate()
    bi_vel = bi.vel
    bi_mass = bi.mass
    energy += 0.5 * bi_mass * (bi_vel * bi_vel).sum()
    for j in (i + 1)..nbody
      bj = bodies[j]
      d = bi.pos - bj.pos
      distance = ((d * d).sum()).sqrt()
      energy -= (bi_mass * bj.mass) / distance
  energy

offset_momentum = |bodies, nbody|
  pos = vec3 0
  for body in bodies
    pos += body.vel * body.mass
  bodies[0].vel = pos / -solar_mass

run_nbody = |n|
  init_bodies()
  nbody = size bodies
  offset_momentum bodies, nbody
  initial_energy = get_energy bodies, nbody
  for _ in 0..n
    advance bodies, 0.01
  end_energy = get_energy bodies, nbody
  initial_energy, end_energy

@main = ||
  n = match koto.args.get 0
    null then 100
    arg then arg.to_number()

  initial_energy, end_energy = run_nbody n

  quiet = (koto.args.get 1) == 'quiet'

  if not quiet
    print '{initial_energy:.9}'
    print '{end_energy:.9}'

@tests =
  @test nbody_100: ||
    initial_energy, end_energy = run_nbody 100
    assert_near initial_energy, -0.16907514, 1.0e-6
    assert_near end_energy, -0.16904989, 1.0e-6
