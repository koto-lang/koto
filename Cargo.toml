[workspace]
members = ["crates/*", "crates/koto/examples/*", "libs/*"]
resolver = "2"

[workspace.package]
authors = ["irh <ian.r.hobson@gmail.com>"]
edition = "2024"
homepage = "https://koto.dev"
keywords = ["scripting", "language", "koto"]
license = "MIT"
readme = "README.md"
repository = "https://github.com/koto-lang/koto"

[workspace.dependencies]
koto_bytecode = { path = "crates/bytecode", default-features = false }
koto_derive = { path = "crates/derive", default-features = false }
koto_format = { path = "crates/format", default-features = false }
koto = { path = "crates/koto", default-features = false }
koto_lexer = { path = "crates/lexer" }
koto_memory = { path = "crates/memory", default-features = false }
koto_parser = { path = "crates/parser", default-features = false }
koto_runtime = { path = "crates/runtime", default-features = false }
koto_serde = { path = "crates/serde", default-features = false }
koto_test_utils = { path = "crates/test_utils", default-features = false }

koto_color = { path = "libs/color", default-features = false }
koto_geometry = { path = "libs/geometry", default-features = false }
koto_json = { path = "libs/json", default-features = false }
koto_random = { path = "libs/random", default-features = false }
koto_regex = { path = "libs/regex", default-features = false }
koto_tempfile = { path = "libs/tempfile", default-features = false }
koto_toml = { path = "libs/toml", default-features = false }
koto_yaml = { path = "libs/yaml", default-features = false }


# Flexible concrete Error type built on std::error::Error
anyhow = "1.0.75"
# Date and time library for Rust
chrono = { version = "0.4.31", default-features = false }
# Efficient, fixed-size, overwriting circular buffer
circular-buffer = "1.1.0"
# Statistics-driven micro-benchmarking library
criterion = { version = "0.5.1", default-features = false }
# A crossplatform terminal library for manipulating terminals.
crossterm = { version = "0.29", default-features = false }
# Adds #[derive(x)] macros for more traits
derive_more = "2.0.1"
# Derive macro to get the name of a struct, enum or enum variant
derive-name = "1.1.0"
# Normalize Windows paths to the most compatible format
dunce = "1.0.2"
# A small cross-platform library for retrieving random data from system source
getrandom = "0.3.2"
# A simple and fast 3D math library for games and graphics
glam = "0.30.1"
# Shared definitions of home directories.
home = "0.5.5"
# A Rust library for conveniently watching and handling file changes.
hotwatch = "0.5.0"
# A hash table with consistent order and fast iteration.
indexmap = "2.0.0"
# A partial replacement for std::time::Instant that works on WASM too.
instant = "0.1.12"
# Extra iterator adaptors
itertools = "0.13.0"
# A macro for declaring lazily evaluated statics in Rust.
lazy_static = "1.4.0"
# Performance and security oriented drop-in allocator
mimalloc = { version = "0.1.39", default-features = false }
# Convert and manage colors with a focus on correctness, flexibility and ease of use.
palette = "0.7.6"
# More compact and efficient implementations of the standard synchronization primitives.
parking_lot = "0.12.1"
# Macros for all your token pasting needs
paste = "1.0.15"
# An ultra simple CLI arguments parser.
pico-args = { version = "0.5.0" }
# A substitute implementation of the compiler's `proc_macro` API
proc-macro2 = "1.0.70"
# A pull parser for CommonMark
pulldown-cmark = { version = "0.13.0", default-features = false }
# Quasi-quoting macro quote!(...)
quote = "1.0.33"
# Random number generators and other randomness functionality.
rand = { version = "0.9.0", default-features = false }
# Xoshiro, xoroshiro and splitmix64 random number generators
rand_xoshiro = "0.7.0"
# A regular expression library
regex = "1.10.2"
# A speedy, non-cryptographic hash used in rustc
rustc-hash = "2.1.0"
# Rustyline, a readline implementation
rustyline = { version = "16.0.0", default-features = false }
# Library for saturating casts between integer primitives.
saturating_cast = "0.1.0"
# A generic serialization/deserialization framework
serde = "1.0.0"
# JSON support for serde
serde_json = { version = "1.0.0", features = ["preserve_order", "std"] }
# YAML data format for serde
serde_yaml_ng = "0.10.0"
# 'Small vector' optimization: store up to a small number of items on the stack
smallvec = { version = "1.11.1", features = ["const_generics", "union"] }
# Parser for Rust source code
syn = { version = "2.0.41", features = ["full"] }
# A library for managing temporary files and directories.
tempfile = "3.1"
# A crate for getting the crate binary in an integration test.
test_bin = "0.4.0"
# Provides #[test_case(...)] macro
test-case = "3.3.1"
# derive(Error)
thiserror = "2"
# A native Rust encoder and decoder of TOML-formatted files and streams.
toml = { version = "0.8.19", features = ["preserve_order"] }
# Powerful library for word wrapping, indenting, and dedenting strings
textwrap = "0.16.0"
# Determine whether characters have the XID_Start or XID_Continue properties
unicode-xid = "0.2.4"
# Determine displayed width of `char` and `str` types
unicode-width = "0.2.0"
# This crate provides Grapheme Cluster, Word and Sentence boundaries
unicode-segmentation = "1.10.0"
# Easy support for interacting between JS and Rust.
wasm-bindgen = "0.2.97"
# Internal testing crate for wasm-bindgen
wasm-bindgen-test = "0.3.47"

# Enable extra optimizations for release builds
[profile.release]
codegen-units = 1
lto = true

# Re-enables default release profile settings, used for CI and local testing
[profile.release-dev]
inherits = "release"
codegen-units = 16
lto = false
